# Generated by Django 4.2.7 on 2025-10-26 23:43

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('devices', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='ConsumptionLimit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Nome descritivo para o limite', max_length=100, verbose_name='Nome do Limite')),
                ('base_limit_kwh', models.FloatField(help_text='Limite base de consumo em kWh', validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='Limite Base (kWh)')),
                ('weather_factor', models.FloatField(default=1.0, help_text='Fator aplicado baseado na previsão do tempo', validators=[django.core.validators.MinValueValidator(0.1)], verbose_name='Fator Meteorológico')),
                ('is_active', models.BooleanField(default=True, help_text='Se o limite está ativo', verbose_name='Ativo')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Data de Criação')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Última Atualização')),
            ],
            options={
                'verbose_name': 'Limite de Consumo',
                'verbose_name_plural': 'Limites de Consumo',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ConsumptionReading',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now, help_text='Data e hora da leitura', verbose_name='Data e Hora')),
                ('consumption_kwh', models.FloatField(help_text='Consumo em kWh no momento da leitura', validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='Consumo (kWh)')),
                ('power_watts', models.FloatField(blank=True, help_text='Potência em Watts no momento da leitura', null=True, validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='Potência (W)')),
                ('voltage', models.FloatField(blank=True, help_text='Voltagem em Volts no momento da leitura', null=True, validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='Voltagem (V)')),
                ('current_amperage', models.FloatField(blank=True, help_text='Corrente em Amperes no momento da leitura', null=True, validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='Corrente (A)')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Data de Criação')),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='consumption_readings', to='devices.device', verbose_name='Dispositivo')),
            ],
            options={
                'verbose_name': 'Leitura de Consumo',
                'verbose_name_plural': 'Leituras de Consumo',
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['device', 'timestamp'], name='consumption_device__4d822c_idx'), models.Index(fields=['timestamp'], name='consumption_timesta_37a4da_idx')],
            },
        ),
        migrations.CreateModel(
            name='ConsumptionAlert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('alert_type', models.CharField(choices=[('high_consumption', 'Consumo Alto'), ('limit_exceeded', 'Limite Excedido'), ('device_offline', 'Dispositivo Offline'), ('unusual_pattern', 'Padrão Incomum')], max_length=20, verbose_name='Tipo de Alerta')),
                ('severity', models.CharField(choices=[('low', 'Baixa'), ('medium', 'Média'), ('high', 'Alta'), ('critical', 'Crítica')], default='medium', max_length=10, verbose_name='Severidade')),
                ('message', models.TextField(help_text='Mensagem descritiva do alerta', verbose_name='Mensagem')),
                ('is_read', models.BooleanField(default=False, help_text='Se o alerta foi lido', verbose_name='Lido')),
                ('is_resolved', models.BooleanField(default=False, help_text='Se o alerta foi resolvido', verbose_name='Resolvido')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Data de Criação')),
                ('resolved_at', models.DateTimeField(blank=True, null=True, verbose_name='Data de Resolução')),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='alerts', to='devices.device', verbose_name='Dispositivo')),
            ],
            options={
                'verbose_name': 'Alerta de Consumo',
                'verbose_name_plural': 'Alertas de Consumo',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['device', 'alert_type'], name='consumption_device__b8fabc_idx'), models.Index(fields=['is_read', 'is_resolved'], name='consumption_is_read_b0cb62_idx'), models.Index(fields=['created_at'], name='consumption_created_615297_idx')],
            },
        ),
    ]
